"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 1.10.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""
import os

import datetime
from backend.config import CONFIG

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = CONFIG.DJANGO_SECRET_KEY

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
ALLOWED_HOSTS = ['.bookedfusion.com', '.execute-api.us-east-1.amazonaws.com', '*']
# Celery settings

CELERY_BROKER_URL = 'amqp://guest:guest@localhost:5672//'

#: Only add pickle to this list if your broker is secured
#: from unwanted access (see userguide/security.html)
CELERY_ACCEPT_CONTENT = ['json']
CELERY_RESULT_BACKEND = 'django-db'
CELERY_TASK_SERIALIZER = 'json'

SITE_ID = 1

# Application definition

APP_LIST = [
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'django_filters',
    # 'django_celery_results',
    'django_extensions',
    'utils_plus',
    'django_ses',
    'django_twilio',
    # 'graphene_django',
    'django_s3_storage',
    'django_mysql',
    'dbbackup',
    'billing',
]

PROJECT_LIST = [
    'authentication_user',
    'customers',
    'services',
    'calendar_manager',
    'app_settings',
    'ratings_manager',
    'embed_page',
    'mailer',
    'openvbx',
    'lexbot',
    'rasa_bot',
]

INSTALLED_APPS = [
                     'django.contrib.contenttypes',
                     'django.contrib.admin',
                     'django.contrib.auth',
                     'django.contrib.sessions',
                     'django.contrib.messages',
                     'django.contrib.staticfiles',
                     'django.contrib.sites',
                     'django.contrib.humanize',
                 ] + APP_LIST + PROJECT_LIST

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',

    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',

    # for performance
    'django.middleware.http.ConditionalGetMiddleware',

    # add this middleware at the end so that the headers set correctly
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': CONFIG.DB_NAME,
        'USER': 'djangouser',
        'PASSWORD': 'techversant!@',
        'HOST': CONFIG.DB_HOST,
        'PORT': CONFIG.DB_PORT,
        'OPTIONS': {
            'charset': 'utf8mb4',
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES', innodb_strict_mode=1",
        },
        'TEST': {
            'CHARSET': 'utf8mb4',
            'COLLATION': 'utf8mb4_unicode_ci',
        }
    },
}

# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'US/Eastern'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/
# ---------static ----------
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_URL = '/static/'
# ------------ media files -----------
MEDIA_ROOT = os.path.join(BASE_DIR, 'media', )
MEDIA_URL = '/media/'

# fully qaulified DOMAIN NAME
BASE_DOMAIN_NAME = CONFIG.base_domain_name

# Custom user model
AUTH_USER_MODEL = 'authentication_user.Account'
# the same account model is used for both customer and its users.
# So the mail ID field should be handled by the model with necessary checks.
SILENCED_SYSTEM_CHECKS = ["auth.E003"]

CORS_ORIGIN_ALLOW_ALL = True

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',),
    'DATETIME_FORMAT': "%Y-%m-%dT%H:%M:%S.%fZ",
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    )
}
JWT_AUTH = {
    'JWT_RESPONSE_PAYLOAD_HANDLER': 'authentication_user.viewsets.jwt_response_payload_handler',
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=7),
}

GOOGLE_OAUTH2_CLIENT_SECRETS_JSON = os.path.join(BASE_DIR, '.keys', 'client_secret.json')
GOOGLE_SERVICE_ACC_JSON = os.path.join(BASE_DIR, '.keys', 'BookingBF-serviceaccount.json')

# GRAPPELLI_INDEX_DASHBOARD = 'app_settings.dashboard.CustomIndexDashboard'

#  ------------ TWILIO -----------------
TWILIO_ACCOUNT_SID = 'AC4b33ce4f86f272fb4045df8a110c0047'
TWILIO_APPLICATION_SID = 'AP3389a2829179a915a7cff8e060868db7'
TWILIO_AUTH_TOKEN = '19046138f098b824ece79b5f771ad69d'
TWILIO_DEFAULT_CALLERID = '+16466814234'
TWILIO_WEBHOOK_BASE_URL = 'https://secure.bookedfusion.com'


# ------------ TWILIO CHAT -----------------
# https://www.twilio.com/docs/chat/create-tokens
# API KEY and API SECRET is master can used all for twilio api service
TWILIO_API_KEY = 'SKe1aacde8f529cf0a9b18932762c86e53'
TWILIO_API_SECRET = 'J9v94glpib4StztpYEnKevAw1guaWY9z'
TWILIO_SERVICE_SID = 'IS9575cb2e50184ccb8f21cbc7f7ca6133'

# -------------- chargebee ---------------
CHARGEBEE_API_KEY = 'live_86fz70toZK6Dcl4ieRSR26Cl7sGeVK5V'
CHARGEBEE_WEBSITE = 'bookedfusion'

# ------------- graphene -------------
GRAPHENE = {
    'SCHEMA': 'backend.schema.schema'  # Where your Graphene schema lives
}

# ------------- Botkit server -------------
#TODO: Configure this once bot is live
BOTKIT_SERVER_URL = 'http://ec2-3-89-143-92.compute-1.amazonaws.com:3000'
BOTKIT_SERVER_DOMAIN = 'http://ec2-3-89-143-92.compute-1.amazonaws.com'

# split logging settings to new file
# noinspection PyUnresolvedReferences
from backend.settings.logging import *  # noqa

# db backup settings
DBBACKUP_CLEANUP_KEEP = 50
DBBACKUP_STORAGE = 'django.core.files.storage.FileSystemStorage'
DBBACKUP_STORAGE_OPTIONS = {'location': os.path.join(BASE_DIR, 'backups')}

DEBUG = True
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
DEFAULT_FILE_STORAGE = 'django_s3_storage.storage.S3Storage'
ALLOWED_HOSTS = ['.ngrok.io', 'localhost', '127.0.0.1', '.serveo.net', ]

# print emails to the console
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# reloads any changes in static files
INSTALLED_APPS.insert(3, 'whitenoise.runserver_nostatic', )
MIDDLEWARE.insert(1, 'whitenoise.middleware.WhiteNoiseMiddleware', )

# do not send actual sms
MOCK_SMS = True